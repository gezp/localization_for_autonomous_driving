# 选择点云匹配方法
registration_method: NDT_OMP
## 匹配相关参数
NDT:
    res : 1.0
    step_size : 0.1
    trans_eps : 0.01
    max_iter : 30
ICP:
    max_corr_dist : 1.2
    trans_eps : 0.01
    euc_fitness_eps : 0.36
    max_iter : 30

# 匹配时为了精度更高，应该选用scan-to-map的方式
# map是以历史帧为中心，往前后时刻各选取extend_frame_num个关键帧，放在一起拼接成的
extend_frame_num: 5

use_same_initial_position: true

loop_step: 5 # 防止检测过于频繁，每隔loop_step个关键帧检测一次闭环
diff_num: 100
detect_area: 10.0 # 检测区域，只有两帧距离小于这个值，才做闭环匹配
fitness_score_limit: 0.2 # 匹配误差小于这个值才认为是有效的

# 之所以要提供不滤波模式，是因为闭环检测对计算时间要求没那么高，而点云越稠密，精度就越高，所以滤波与否都有道理
# 选择滑窗地图点云滤波方法
local_map_filter:
    enable: true
    leaf_size: [0.3, 0.3, 0.3]

# 选择当前帧点云滤波方法
current_scan_filter:
    enable: true
    leaf_size: [0.3, 0.3, 0.3]

 # 选择回环检测方法, 目前支持scan_context
loop_closure_method: scan_context
## ScanContext params:
scan_context:
    # a. ROI definition:
    max_radius: 80.0
    max_theta: 360.0
    # b. resolution:
    num_rings: 20
    num_sectors: 60
    # c. ring key indexing interval:
    indexing_interval: 1
    # d. min. key frame sequence distance:
    min_key_frame_seq_distance: 100
    # e. num. of nearest-neighbor candidates to check:
    num_candidates: 5
    # f. sector key fast alignment search ratio:
    #   avoid brute-force match using sector key
    fast_alignment_search_ratio: 0.1
    # g. scan context distance threshold for proposal generation:
    #   0.4-0.6 is good choice for using with robust kernel (e.g., Cauchy, DCS) + icp fitness threshold
    #   if not, recommend 0.1-0.15
    scan_context_distance_thresh: 0.20
